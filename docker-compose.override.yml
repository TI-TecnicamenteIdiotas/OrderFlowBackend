version: '3.9'

services:
  nimbleflow.sql.db:
    container_name: nimbleflow.sql.db
    image: postgres:alpine
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U postgres -d postgres"
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    ports:
      - "10500:5432"
    volumes:
      - nimbleflow.sql.db:/var/lib/postgresql/data
      - .assets/initsql:/docker-entrypoint-initdb.d
    restart: always

  nimbleflow.nosql.db:
    container_name: nimbleflow.nosql.db
    image: "amazon/dynamodb-local:latest"
    user: root
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    ports:
      - "10501:8000"
    volumes:
      - nimbleflow.nosql.db:/home/dynamodblocal/data
    working_dir: /home/dynamodblocal
    restart: always

  nimbleflow.minio:
    container_name: nimbleflow.minio
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    command: 'minio server /data/minio --console-address ":9090"'
    ports:
      - "10502:9000"
      - "10503:9090"
    volumes:
      - nimbleflow.minio:/data
    restart: always

  nimbleflow.aws.up:
    container_name: nimbleflow.aws.up
    build:
      dockerfile: .assets/initaws/Dockerfile
      context: .
    depends_on:
      nimbleflow.nosql.db:
        condition: service_started
      nimbleflow.minio:
        condition: service_started
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_SERVICE_URL=${AWS_S3_SERVICE_URL}
      - NO_SQL_DATABASE_PATH=${NO_SQL_DATABASE_PATH}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}

  nimbleflow.aspnetcore.hub:
    build:
      context: ./AspDotNetCoreHub
      dockerfile: Src/NimbleFlowHub.Api/Dockerfile

  nimbleflow.aspnetcore:
    build:
      context: ./AspDotNetCore
      dockerfile: Src/NimbleFlow.Api/Dockerfile
    depends_on:
      nimbleflow.aspnetcore.hub:
        condition: service_started
      nimbleflow.sql.db:
        condition: service_healthy
      nimbleflow.aws.up:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"

  nimbleflow.java:
    build:
      context: ./SpringBoot
      dockerfile: Dockerfile
    depends_on:
      nimbleflow.aspnetcore:
        condition: service_started

networks:
  default:
    name: nimbleflow-network

volumes:
  nimbleflow.sql.db:
    driver: local
  nimbleflow.nosql.db:
    driver: local
  nimbleflow.minio:
    driver: local